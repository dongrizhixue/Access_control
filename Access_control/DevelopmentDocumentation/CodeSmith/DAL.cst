<%@ CodeTemplate Language="C#" TargetLanguage="C#" Description="Generates a very simple business object." %>
<%@ Property Name="TargetTable" Type="SchemaExplorer.TableSchema" Category="Context" Description="TargetTable that the object is based on." %>
<%@ Property Name="ModelsNamespace" Default="CallOutPlatform.Models" Type="System.String" Category="Context" Description="TargetTable that the object is based on." %>
<%@ Property Name="DALNamespace" Default="CallOutPlatform" Type="System.String" Category="Context" Description="TargetTable that the object is based on." %>
<%@ Property Name="DALClassNameSurfix" Default="Service" Type="System.String" Category="Context" Description="TargetTable that the object is based on." %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<% PrintHeader(); %>
using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using System.Data.SqlClient;
using DAL.Tool;
using Entity;

namespace DAL
{
	public static partial class <%= GetDALClassName() %>
	{
		 /// <summary>
        /// 添加记录
        /// </summary>
        /// <param name="<%= GetModelClassName() %> ">实体类参数</param>
        public static <%= GetModelClassName() %> Add<%= GetModelClassName() %>(<%= GetModelClassName() %> <%= GetModelParamName() %>)
		{
            string sql =
				<%= GetInsertSQLLine1()%>
				<%= GetInsertSQLLine2()%>
				
			sql += " ; SELECT IDENT_CURRENT('<%= GetModelClassName() %>')";		

            try
            {
				SqlParameter[] para = new SqlParameter[]
				{
					<% 
					for(int i=0; i<TargetTable.NonPrimaryKeyColumns.Count-1; i++)
					{ 
						ColumnSchema column = TargetTable.NonPrimaryKeyColumns[i];
					%>
					new SqlParameter("@<%= GetCloumnName(column.Name) %>", <%= GetModelParamName() %>.<%= GetCloumnName(column.Name) %>!=null?  (object)<%= GetModelParamName() %>.<%= GetCloumnName(column.Name) %>:DBNull.Value),
					<%
					}
					for(int i=TargetTable.NonPrimaryKeyColumns.Count-1; i<TargetTable.NonPrimaryKeyColumns.Count; i++)
					{
						ColumnSchema lastColumn = TargetTable.NonPrimaryKeyColumns[i];
					%>
					new SqlParameter("@<%= GetCloumnName(lastColumn.Name) %>", <%= GetModelParamName() %>.<%= GetCloumnName(lastColumn.Name) %> !=null?  (object)<%= GetModelParamName() %>.<%= GetCloumnName(lastColumn.Name) %>:DBNull.Value)
					<%
					}
					%>
				};
				
                int newId = (int)(decimal)DBHelper.ExecuteScalar(CommandType.Text,sql, para);
				return Get<%= GetModelClassName() %>By<%= GetPKPropertyName() %>(newId);
            }
            catch (Exception e)
            {
					throw e;
            }
		}
		
		 /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="BASETYPE">实体类参数</param>
        public static int Delete<%= GetModelClassName() %>(<%= GetModelClassName() %> <%= GetModelParamName() %>)
		{
			 return Delete<%= GetModelClassName() %>By<%= GetPKPropertyName() %>( <%= GetModelParamName() %>.<%= GetPKPropertyName() %> );
		}

		 /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="<%= GetPKPropertyName() %>">主键</param>
        public static int Delete<%= GetModelClassName() %>By<%= GetPKPropertyName() %>(<%= GetPKPropertyType() %> <%= GetPKParamName() %>)
		{
            string sql = "DELETE <%= TargetTable.Name %> WHERE <%= GetPKPropertyName() %> = @<%= GetPKPropertyName() %>";

            try
            {
				SqlParameter[] para = new SqlParameter[]
				{
					new SqlParameter("@<%= GetPKName() %>", <%= GetPKParamName() %>)
				};
			
                return  DBHelper.ExecuteNonQuery(CommandType.Text, sql, para);
            }
            catch (Exception e)
            {
				throw e;
            }
		}
		 
		<% foreach( IndexSchema index in TargetTable.Indexes )
		{
			if(index.IsUnique && !index.IsPrimaryKey && index.MemberColumns.Count  == 1)
			{
				string indexColumnName = index.MemberColumns[0].Name;
				ColumnSchema indexColumn = index.MemberColumns[0];

				string indexPropertyName = MakePascal(indexColumnName);
				string indexParamType = GetParamType(indexColumn);
				string indexParamName = MakeCamel(indexColumnName);
				string indexMemberName = MakeCamel(indexColumnName);
		%>
		
		 /// <summary>
        /// 删除记录
        /// </summary>
        /// <param name="<%= indexPropertyName %>">主键</param> 
        public static int Delete<%= GetModelClassName() %>By<%= indexPropertyName %>(<%= indexParamType %> <%= indexParamName %>)
		{
            string sql = "DELETE <%= TargetTable.Name %> WHERE <%= indexPropertyName %> = @<%= indexPropertyName %>";

            try
            {
				SqlParameter[] para = new SqlParameter[]
				{
					new SqlParameter("@<%= indexPropertyName %>", <%= indexParamName %>)
				};
			
               return DBHelper.ExecuteNonQuery(CommandType.Text, sql, para);
            }
            catch (Exception e)
            {
				throw e;
            }
		}
		
			<% } %>
		<% } %>						
		
		
		/// <summary>
        /// 修改记录
        /// </summary>
        /// <param name="<%= GetModelClassName() %>">主键</param> 
        public static int Modify<%= GetModelClassName() %>(<%= GetModelClassName() %> <%= GetModelParamName() %>)
        {
            string sql =
                "UPDATE <%= TargetTable.Name %> " +
                "SET " +
				<%
				 
				for(int i=0; i<TargetTable.NonPrimaryKeyColumns.Count-1; i++)
				{
					ColumnSchema column = TargetTable.NonPrimaryKeyColumns[i];
				%>
	                "<%= GetCloumnName(column.Name) %> = @<%= GetCloumnName(column.Name) %>, " +
				<%
				}
				for(int i=TargetTable.NonPrimaryKeyColumns.Count-1; i<TargetTable.NonPrimaryKeyColumns.Count; i++)
				{
					ColumnSchema column = TargetTable.NonPrimaryKeyColumns[i];
				%>
	                "<%= GetCloumnName(column.Name) %> = @<%= GetCloumnName(column.Name) %> " +
				<%
				}
				%>
                "WHERE <%= GetPKName() %> = @<%= GetPKName() %>";


            try
            {
				SqlParameter[] para = new SqlParameter[]
				{
					new SqlParameter("@<%= GetPKName() %>", <%= GetModelParamName() %>.<%= GetPKName() %>),
					<% 
					for(int i=0; i<TargetTable.NonPrimaryKeyColumns.Count-1; i++)
					{
						ColumnSchema column = TargetTable.NonPrimaryKeyColumns[i];
					%>
					new SqlParameter("@<%= GetCloumnName(column.Name) %>", <%= GetModelParamName() %>.<%= GetCloumnName(column.Name) %>!=null?(object)<%= GetModelParamName() %>.<%= GetCloumnName(column.Name) %>:DBNull.Value),
					<%
					}
					for(int i=TargetTable.NonPrimaryKeyColumns.Count-1; i<TargetTable.NonPrimaryKeyColumns.Count; i++)
					{
						ColumnSchema lastColumn = TargetTable.NonPrimaryKeyColumns[i];
					%>
					new SqlParameter("@<%= GetCloumnName(lastColumn.Name) %>", <%= GetModelParamName() %>.<%= GetCloumnName(lastColumn.Name)%>!=null?(object)<%= GetModelParamName() %>.<%= GetCloumnName(lastColumn.Name)%>: DBNull.Value)
					<%
					}
					%>
				};

				return DBHelper.ExecuteNonQuery(CommandType.Text, sql, para);
            }
            catch (Exception e)
            {
				throw e;
            }

        }		

		 /// <summary>
        /// 获得全部记录 尽量避免使用
        /// </summary>       
        public static List<<%= GetModelClassName() %>> GetAll<%= MakePlural(GetModelClassName()) %>()
        {
            string sqlAll = "SELECT * FROM <%= TargetTable.Name %>";
			return Get<%= MakePlural(GetModelClassName()) %>BySql( sqlAll );
        }
		
		/// <summary>
        /// 获取记录
        /// </summary>
        /// <param name="GetPKPropertyName()">参数</param> 
        public static <%= GetModelClassName() %> Get<%= GetModelClassName() %>By<%= GetPKPropertyName() %>(<%= GetPKPropertyType() %> <%= GetPKParamName() %>)
        {
            string sql = "SELECT * FROM <%= TargetTable.Name %> WHERE <%= GetPKPropertyName() %> = @<%= GetPKPropertyName() %>";
			  
            try
            {
                SqlDataReader reader = DBHelper.ExecuteReader( CommandType.Text,sql, new SqlParameter("@<%= GetPKPropertyName() %>", <%= GetPKParamName() %>));
                if (reader.Read())
                {
                    <%= GetModelClassName() %> <%= GetModelParamName() %> = new <%= GetModelClassName() %>();

					<% foreach(ColumnSchema column in TargetTable.Columns) %>
					<% { %>
					<%= GetModelParamName() %>.<%= GetPropertyName(column) %> =reader["<%= GetCloumnName(column.Name) %>"] == DBNull.Value? null : (<%= GetPropertyType(column) %>)reader["<%= GetCloumnName(column.Name) %>"];
					<% } %>
					 
                    reader.Close(); 
					
                    return <%= GetModelParamName() %>;
                }
                else
                {
                    reader.Close();
                    return null;
                }
            }
            catch (Exception e)
            {
                throw e;
            }
        }
		
        /// <summary>
        /// 获取一个有默认值的实体
        /// </summary>
        /// <param name="GetPKPropertyName()">参数</param> 
        public static <%= GetModelClassName() %> GetDefaultEntity<%= GetModelClassName() %>By<%= GetPKPropertyName() %>(<%= GetPKPropertyType() %> <%= GetPKParamName() %>)
        {
            string sql = "SELECT * FROM <%= TargetTable.Name %> WHERE <%= GetPKPropertyName() %> = @<%= GetPKPropertyName() %>";
			  
            try
            {
                SqlDataReader reader = DBHelper.ExecuteReader( CommandType.Text,sql, new SqlParameter("@<%= GetPKPropertyName() %>", <%= GetPKParamName() %>));
                <%= GetModelClassName() %> <%= GetModelParamName() %> = new <%= GetModelClassName() %>();
                if (reader.Read())
                {
					<% foreach(ColumnSchema column in TargetTable.Columns) %>
					<% { %>
					<%= GetModelParamName() %>.<%= GetPropertyName(column) %> =reader["<%= GetCloumnName(column.Name) %>"] == DBNull.Value? null : (<%= GetPropertyType(column) %>)reader["<%= GetCloumnName(column.Name) %>"];
					<% } %>
					 
                    reader.Close(); 
					
                    return <%= GetModelParamName() %>;
                }
                else
                {
                    reader.Close();
                    return <%= GetModelParamName() %>;
                }
            }
            catch (Exception e)
            {
                throw e;
            }
        }
        
        /// <summary>
        /// 通过WHERE条件获取一个实体
        /// </summary>
        /// <param name="where">WHERE条件</param>
		/// <param name="SqlParameter">参数</param>
		 public static <%= GetModelClassName() %> Get<%= MakePlural(GetModelClassName()) %>ByWhere( string where, params SqlParameter[] values )
        {
            List<<%= GetModelClassName() %>> list = Get<%= MakePlural(GetModelClassName()) %>ByCondition(where,values);
            if(list==null || list.Count == 0)
            {
               return null;
            }
            else
            {
               return list[0];
            }
        }
        
		<% foreach( IndexSchema index in TargetTable.Indexes )
		{
			if(index.IsUnique && !index.IsPrimaryKey && index.MemberColumns.Count  == 1)
			{
				string indexColumnName = index.MemberColumns[0].Name;
				ColumnSchema indexColumn = index.MemberColumns[0];

				string indexPropertyName = MakePascal(indexColumnName);
				string indexParamType = GetParamType(indexColumn);
				string indexParamName = MakeCamel(indexColumnName);
				string indexMemberName = MakeCamel(indexColumnName);
		%>
		 
        public static <%= GetModelClassName() %> Get<%= GetModelClassName() %>By<% =indexPropertyName %>(<%= indexParamType %> <%= indexParamName %>)
        {
            string sql = "SELECT * FROM <%= TargetTable.Name %> WHERE <%= indexColumnName %> = @<%= indexColumnName %>";
			 
            try
            {
                SqlDataReader reader = DBHelper.ExecuteReader(CommandType.Text,sql, new SqlParameter("@<%= indexColumnName %>", <%= indexParamName %>));
                if (reader.Read())
                {
                    <%= GetModelClassName() %> <%= GetModelParamName() %> = new <%= GetModelClassName() %>();

					<% foreach(ColumnSchema column in TargetTable.Columns) %>
					<% { %>
					<%= GetModelParamName() %>.<%= GetPropertyName(column) %> = reader["<%= GetCloumnName(column.Name) %>"]==DBNull.Value?null: (<%= GetPropertyType(column) %>)reader["<%= GetCloumnName(column.Name) %>"];
					<% } %>
					 
                    reader.Close();
					 
                    return <%= GetModelParamName() %>;
                }
                else
                {
					reader.Close();
                    return null;
                }
            }
            catch (Exception e)
            {
                throw e;
            }
        }
		
        /// <summary>
        /// 获取一个默认值的实体
        /// </summary>
        public static <%= GetModelClassName() %> GetDefaultEntity<%= GetModelClassName() %>By<% =indexPropertyName %>(<%= indexParamType %> <%= indexParamName %>)
        {
            string sql = "SELECT * FROM <%= TargetTable.Name %> WHERE <%= indexColumnName %> = @<%= indexColumnName %>";
			 
            try
            {
                SqlDataReader reader = DBHelper.ExecuteReader(CommandType.Text,sql, new SqlParameter("@<%= indexColumnName %>", <%= indexParamName %>));
                <%= GetModelClassName() %> <%= GetModelParamName() %> = new <%= GetModelClassName() %>();
                if (reader.Read())
                {
					<% foreach(ColumnSchema column in TargetTable.Columns) %>
					<% { %>
					<%= GetModelParamName() %>.<%= GetPropertyName(column) %> = reader["<%= GetCloumnName(column.Name) %>"]==DBNull.Value?null: (<%= GetPropertyType(column) %>)reader["<%= GetCloumnName(column.Name) %>"];
					<% } %>
					 
                    reader.Close();
					 
                    return <%= GetModelParamName() %>;
                }
                else
                {
					reader.Close();
                    return <%= GetModelParamName() %>;
                }
            }
            catch (Exception e)
            {
                throw e;
            }
        }
        
			<% } %>
		<% } %>
		
       
		/// <summary>
        /// 通过SQL语句获取记录
        /// </summary>
        /// <param name="safeSql">SQL语句</param>
        public static List<<%= GetModelClassName() %>> Get<%= MakePlural(GetModelClassName()) %>BySql( string safeSql )
        {
            List<<%= GetModelClassName() %>> list = new List<<%= GetModelClassName() %>>();

			try
			{
				DataTable table = DBHelper.ExecuteDataset(CommandType.Text,safeSql).Tables[0];
				
				foreach (DataRow row in table.Rows)
				{
					<%= GetModelClassName() %> <%= GetModelParamName() %> = new <%= GetModelClassName() %>();
					
					<% foreach(ColumnSchema column in TargetTable.Columns) %>
					<% { %>
					<%= GetModelParamName() %>.<%= GetPropertyName(column) %> = row["<%= GetCloumnName(column.Name) %>"]==DBNull.Value?null:  (<%= GetPropertyType(column) %>)row["<%= GetCloumnName(column.Name) %>"];
					<% } %>
					 
					list.Add(<%= GetModelParamName() %>);
				}
	
				return list;
			}
            catch (Exception e)
            {
                throw e;
            }

        }
		/// <summary>
        /// 通过SQL语句获取记录
        /// </summary>
        /// <param name="safeSql">SQL语句</param>
		///<param name="commandtype">执行的类型</param>
        public static List<<%= GetModelClassName() %>> Get<%= MakePlural(GetModelClassName()) %>BySql( string safeSql , CommandType commandtype)
        {
            List<<%= GetModelClassName() %>> list = new List<<%= GetModelClassName() %>>();

			try
			{
				DataTable table = DBHelper.ExecuteDataset(commandtype ,safeSql).Tables[0];
				
				foreach (DataRow row in table.Rows)
				{
					<%= GetModelClassName() %> <%= GetModelParamName() %> = new <%= GetModelClassName() %>();
					
					<% foreach(ColumnSchema column in TargetTable.Columns) %>
					<% { %>
					<%= GetModelParamName() %>.<%= GetPropertyName(column) %> = row["<%= GetCloumnName(column.Name) %>"]==DBNull.Value?null:  (<%= GetPropertyType(column) %>)row["<%= GetCloumnName(column.Name) %>"];
					<% } %>
					 
					list.Add(<%= GetModelParamName() %>);
				}
	
				return list;
			}
            catch (Exception e)
            {
                throw e;
            }

        }
        
        		/// <summary>
        /// 通过SQL语句获取记录
        /// </summary>
        /// <param name="safeSql">SQL语句</param>
		///<param name="commandtype">执行的类型</param>
        /// <param name="SqlParameter">参数</param>
        public static List<<%= GetModelClassName() %>> Get<%= MakePlural(GetModelClassName()) %>BySql( string safeSql , CommandType commandtype,params SqlParameter[] values)
        {
            List<<%= GetModelClassName() %>> list = new List<<%= GetModelClassName() %>>();

			try
			{
				DataTable table = DBHelper.ExecuteDataset(commandtype ,safeSql,values).Tables[0];
				
				foreach (DataRow row in table.Rows)
				{
					<%= GetModelClassName() %> <%= GetModelParamName() %> = new <%= GetModelClassName() %>();
					
					<% foreach(ColumnSchema column in TargetTable.Columns) %>
					<% { %>
					<%= GetModelParamName() %>.<%= GetPropertyName(column) %> = row["<%= GetCloumnName(column.Name) %>"]==DBNull.Value?null:  (<%= GetPropertyType(column) %>)row["<%= GetCloumnName(column.Name) %>"];
					<% } %>
					 
					list.Add(<%= GetModelParamName() %>);
				}
	
				return list;
			}
            catch (Exception e)
            {
                throw e;
            }

        }
        
		 /// <summary>
        /// 通过SQL语句获取记录
        /// </summary>
        /// <param name="safeSql">SQL语句</param>
		/// <param name="SqlParameter">参数</param>
        public static List<<%= GetModelClassName() %>> Get<%= MakePlural(GetModelClassName()) %>BySql( string sql, params SqlParameter[] values )
        {
            List<<%= GetModelClassName() %>> list = new List<<%= GetModelClassName() %>>();

			try
			{
				DataTable table = DBHelper.ExecuteDataset(CommandType.Text,sql,values).Tables[0];
				
				foreach (DataRow row in table.Rows)
				{
					<%= GetModelClassName() %> <%= GetModelParamName() %> = new <%= GetModelClassName() %>();
					
					<% foreach(ColumnSchema column in TargetTable.Columns) %>
					<% { %>
					<%= GetModelParamName() %>.<%= GetPropertyName(column) %> =row["<%= GetCloumnName(column.Name) %>"] ==DBNull.Value?null:  (<%= GetPropertyType(column) %>)row["<%= GetCloumnName(column.Name) %>"];
					<% } %>
					 
	
					list.Add(<%= GetModelParamName() %>);
				}
	
				return list;
			}
            catch (Exception e)
            {
                throw e;
            }
			
        }
	
		/// <summary>
        /// 通过WHERE条件获取记录
        /// </summary>
        /// <param name="where">WHERE条件</param>
		/// <param name="SqlParameter">参数</param>
		 public static List<<%= GetModelClassName() %>> Get<%= MakePlural(GetModelClassName()) %>ByCondition( string where, params SqlParameter[] values )
        {
            List<<%= GetModelClassName() %>> list = new List<<%= GetModelClassName() %>>();
			string  sql  = "SELECT  ROW_NUMBER() over (order by <%=GetPKPropertyName()%>) abcd ,* FROM  <%= GetModelClassName()%> WHERE  "  +  where;
			try
			{
                DataSet ds = DBHelper.ExecuteDataset(CommandType.Text, sql, values);
                if (ds == null || ds.Tables.Count == 0 || ds.Tables[0].Rows.Count == 0)
                {
                    return null;
                }
				DataTable table = ds.Tables[0];
				
				foreach (DataRow row in table.Rows)
				{
					<%= GetModelClassName() %> <%= GetModelParamName() %> = new <%= GetModelClassName() %>();
					
					<% foreach(ColumnSchema column in TargetTable.Columns) %>
					<% { %>
					<%= GetModelParamName() %>.<%= GetPropertyName(column) %> =row["<%= GetCloumnName(column.Name) %>"] ==DBNull.Value?null:  (<%= GetPropertyType(column) %>)row["<%= GetCloumnName(column.Name) %>"];
					<% } %>
					 
	                <%= GetModelParamName() %>.ABCD = row["ABCD"] ==DBNull.Value ? null : (long?)row["ABCD"]; 

					list.Add(<%= GetModelParamName() %>);
				}
	
				return list;
			}
            catch (Exception e)
            {
                throw e;
            }
        }
		
         /// <summary>
        ///  获取中文列名记录
        /// </summary>
        /// <param name="safeSql">SQL语句</param>
		public static  DataTable Get<%= MakePlural(GetModelClassName()) %>ChineseByWhere(string where, params SqlParameter[] values )
    	{  
            List<<%= GetModelClassName() %>> list = new List<<%= GetModelClassName() %>>(); 
            string  sql  = @"SELECT  ROW_NUMBER() over (order by <%=GetPKPropertyName()%>) abcd , <%=GetColumnAndChinese()%> FROM  <%= GetModelClassName()%> WHERE  "  +  where;
			try
			{
				DataTable table = DBHelper.ExecuteDataset(CommandType.Text,sql,values).Tables[0];
				return table;
			}
            catch (Exception e)
            {
                throw e;
            } 
    	}
		
        
		 /// <summary>
        ///  得到插入SQL语句
        /// </summary>
        /// <param name=" <%= GetModelClassName()%>">实体类</param> 
		 public static string GetINSERTSQL( <%= GetModelClassName()%> <%= GetModelClassName()%> )
        {
		   string sql  =  "INSERT  <%= GetModelClassName()%> (  ";	
		   <% foreach(ColumnSchema column in TargetTable.NonPrimaryKeyColumns) 
			{%>
				if ( <%= GetModelClassName()%>.<%= GetPropertyName(column) %> != null)
			     sql += "<%= GetPropertyName(column) %>  ," ;
			<%}
		   %>	
		   sql = sql.Substring(0,sql.Length - 1);
		   sql += " ) values(  " ;
		   <% foreach(ColumnSchema column in TargetTable.NonPrimaryKeyColumns) 
			{%>
				if ( <%= GetModelClassName()%>.<%= GetPropertyName(column) %> != null)
				{
					 Type t = <%= GetModelClassName()%>.<%= GetPropertyName(column) %>.GetType();
					if( t == Type.GetType("System.String") || t == Type.GetType("System.DateTime"))
					{
					     sql += "'" +  <%= GetModelClassName()%>.<%= GetPropertyName(column) %>  + "' ,"  ;
				    }
					else
						 sql += <%= GetModelClassName()%>.<%= GetPropertyName(column) %> +" ," ;
				}
				
			    
			<%}
		   %>	
			 sql = sql.Substring(0,sql.Length - 1);
		   sql += " );" ;
		
		  return sql;
		}
		
		
		/// <summary>
        ///  得到更新SQL语句
        /// </summary>
        /// <param name=" <%= GetModelClassName()%>">实体类</param> 
		 public static string GetUPDATESQL( <%= GetModelClassName()%> <%= GetModelClassName()%> )
        {
		   string sql  =  "UPDATE  <%= GetModelClassName()%>  SET  ";	  
		   <% foreach(ColumnSchema column in TargetTable.NonPrimaryKeyColumns) 
			{%>
				if ( <%= GetModelClassName()%>.<%= GetPropertyName(column) %> != null)
				{
					 Type t = <%= GetModelClassName()%>.<%= GetPropertyName(column) %>.GetType();
					sql += "  <%= GetModelClassName()%>.<%= GetPropertyName(column) %> = ";
					if( t == Type.GetType("System.String") || t == Type.GetType("System.DateTime"))
					{
					     sql +=  "  '" +  <%= GetModelClassName()%>.<%= GetPropertyName(column) %>  + "' ,"  ;
				    }
					else
						 sql += <%= GetModelClassName()%>.<%= GetPropertyName(column) %> +" ," ;
				}
				
			    
			<%}
		   %>	
			 sql = sql.Substring(0,sql.Length - 1); 
		   if(	 <%= GetModelClassName()%>.<%= GetPKPropertyName() %> == null )
				return sql;
		   Type tt =  <%= GetModelClassName()%>.<%= GetPKPropertyName() %>.GetType();
		   if( tt == Type.GetType("System.String") || tt == Type.GetType("System.DateTime"))
		   		sql += " WHERE <%= GetPKPropertyName() %> = '"+ <%= GetModelClassName()%>.<%= GetPKPropertyName() %> +"';";
		   else
			    sql += " WHERE <%= GetPKPropertyName() %> = "+ <%= GetModelClassName()%>.<%= GetPKPropertyName() %> +";";
	   		 
		  return sql;
		}
	}
}
<script runat="template">
///////////////////////////////////////////////////////////////
// CLASS NAMES by Shen Bo
///////////////////////////////////////////////////////////////
// UserService
public string GetDALClassName()
{
	return 	GetModelClassName() + DALClassNameSurfix;
}
// User
public string GetModelClassName()
{
	return 	GetModelClassName(TargetTable);
}
// user
public string GetModelMemberVarName()
{
	return GetModelParamName();
}
// user
public string GetModelParamName()
{
	return MakeCamel(GetModelClassName());
}
// User
public string GetModelClassName(TableSchema table)
{ 	
	return MakePascal(table.Name);
}


 public string GetInsertSQLLine1()
{
	string result;
	result = "\"INSERT " + TargetTable.Name + " (";
	foreach(ColumnSchema column in TargetTable.NonPrimaryKeyColumns)
	{
		result += GetCloumnName(column.Name) + ", ";
	}
	result = result.Substring(0, result.Length-2);
	result += ")\" +";

	return result;
}
// "VALUES (@LoginId,@LoginPwd,@UserName,@Address,@Phone,@Mail,@RoleId,@UserStateId)";
public string GetInsertSQLLine2()
{
	string result;
	result = "\"VALUES (";
	foreach(ColumnSchema column in TargetTable.NonPrimaryKeyColumns)
	{
		result += "@" + GetCloumnName(column.Name) + ", ";
	}
	result = result.Substring(0, result.Length-2);
	result += ")\";";
	return result;
}


///////////////////////////////////////////////////////////////
// PRIMARY KEY TYPE by Shen Bo
///////////////////////////////////////////////////////////////
// int
public string GetPKPropertyType()
{
	return 	GetPKType(TargetTable);
}
// int
public string GetPKType()
{
	return 	GetPKType(TargetTable);
}
// int
public string GetPKType(TableSchema TargetTable)
{
	if (TargetTable.PrimaryKey != null)
	{
		if (TargetTable.PrimaryKey.MemberColumns.Count == 1)
		{
			return GetCSharpTypeFromDBFieldType(TargetTable.PrimaryKey.MemberColumns[0]);
		}
		else
		{
			throw new ApplicationException("This template will not work on primary keys with more than one member column.");
		}
	}
	else
	{
		throw new ApplicationException("This template will only work on MyTables with a primary key.");
	}
}


///////////////////////////////////////////////////////////////
// PRIMARY KEY NAME by Shen Bo
///////////////////////////////////////////////////////////////
// Id
public string GetPKPropertyName()
{
	return MakePascal(GetPKName());
}
// id
public string GetPKParamName()
{
	return GetPKMemberVarName();	
}
// id
public string GetPKMemberVarName()
{
	return MakeCamel(GetPKName());	
}
// Id
public string GetPKName()
{
	return GetPKName(TargetTable);
}
// Id
public string GetPKName(TableSchema TargetTable)
{
	if (TargetTable.PrimaryKey != null)
	{
		if (TargetTable.PrimaryKey.MemberColumns.Count == 1)
		{
			 
			return  GetCloumnName(TargetTable.PrimaryKey.MemberColumns[0].Name);
		}
		else
		{
			throw new ApplicationException("This template will not work on primary keys with more than one member column.");
		}
	}
	else
	{
		throw new ApplicationException("This template will only work on tables with a primary key.");
	}
}


///////////////////////////////////////////////////////////////
// FOREIGH KEY PROPERTY TYPE by Shen Bo
///////////////////////////////////////////////////////////////
// UserState
public string GetFKPropertyType(TableKeySchema key)
{
	return MakePascal(GetFKPrimaryModelClassName(key));
}

///////////////////////////////////////////////////////////////
// FOREIGH KEY PROPERTY NAME by Shen Bo
///////////////////////////////////////////////////////////////
// userState
public string GetFKMemberVarName(TableKeySchema key)
{
	string result = GetFKForeignIdName(key);
	if( result.ToLower().EndsWith("id") )
	{
		result = result.Substring(0, result.Length - 2);	
	}
	return MakeCamel(result);
}
// UserState
public string GetFKPropertyName(TableKeySchema key)
{
	return MakePascal(GetFKMemberVarName(key));
}
// UserState
public string GetFKPrimaryModelClassName(TableKeySchema key)
{
	return GetModelClassName(key.PrimaryKeyTable);
}

///////////////////////////////////////////////////////////////
// FOREIGH KEY ID NAMEs by Shen Bo
///////////////////////////////////////////////////////////////
//In User table => UserStateId
public string GetFKForeignIdName(TableKeySchema key)	
{
	return key.ForeignKeyMemberColumns[0].Name;
}
//In UserState table => Id
public string GetFKPrimaryIdName(TableKeySchema key)
{
	string rtn =key.PrimaryKeyMemberColumns[0].Name;
	return rtn.Substring(0,1).ToUpper()+rtn.Substring(1);
}


///////////////////////////////////////////////////////////////
// PROPERTY TYPE by Shen Bo
///////////////////////////////////////////////////////////////
public string GetPropertyType(ColumnSchema column)
{
	return GetCSharpTypeFromDBFieldType(column);
}
public string GetMemberVarType(ColumnSchema column)
{
	return GetCSharpTypeFromDBFieldType(column);
}
public string GetParamType(ColumnSchema column)
{
	return GetCSharpTypeFromDBFieldType(column);
}
public string GetCSharpTypeFromDBFieldType(ColumnSchema column)
{
	if (GetCloumnName(column.Name).EndsWith("TypeCode")) return GetCloumnName(column.Name);
	
	switch (column.DataType)
	{
		case DbType.AnsiString: return "string";
		case DbType.AnsiStringFixedLength: return "string";
		case DbType.Binary: return "byte[]";
		case DbType.Boolean: return "bool?";
		case DbType.Byte: return "byte?";
		case DbType.Currency: return "decimal?";
		case DbType.Date: return "DateTime";
		case DbType.DateTime: return "DateTime?";
		case DbType.Decimal: return "decimal?";
		case DbType.Double: return "double?";
		case DbType.Guid: return "Guid";
		case DbType.Int16: return "short?";
		case DbType.Int32: return "int?";
		case DbType.Int64: return "long?";
		case DbType.Object: return "object";
		case DbType.SByte: return "sbyte?";
		case DbType.Single: return "float?";
		case DbType.String: return "string";
		case DbType.StringFixedLength: return "string";
		case DbType.Time: return "TimeSpan";
		case DbType.UInt16: return "ushort?";
		case DbType.UInt32: return "uint?";
		case DbType.UInt64: return "ulong?";
		case DbType.VarNumeric: return "decimal";
		default:
		{
			return "__UNKNOWN__" + column.NativeType;
		}
	}
}

///////////////////////////////////////////////////////////////
// PROPERTY NAME by Shen Bo
///////////////////////////////////////////////////////////////
public string GetMemberVarName(ColumnSchema column)
{
	return MakeCamel(GetNameFromDBFieldName(column));
}
public string GetPropertyName(ColumnSchema column)
{
	return MakePascal(GetNameFromDBFieldName(column));
}
public string GetNameFromDBFieldName(ColumnSchema column)
{
	string name = column.Name;
	if(name.StartsWith(GetDALClassName()))
	{
		name = name.Substring(GetDALClassName().Length);	
	}
	return name;
}


public string GetMemberVariableDefaultValue(ColumnSchema column)
{
	switch (column.DataType)
	{
		case DbType.Guid:
		{
			return "Guid.Empty";
		}
		case DbType.AnsiString:
		case DbType.AnsiStringFixedLength:
		case DbType.String:
		case DbType.StringFixedLength:
		{
			return "String.Empty";
		}
		default:
		{
			return "";
		}
	}
}


public string GetReaderMethod(ColumnSchema column)
{
	switch (column.DataType)
	{
		case DbType.Byte:
		{
			return "GetByte";
		}
		case DbType.Int16:
		{
			return "GetInt16";
		}
		case DbType.Int32:
		{
			return "GetInt32";
		}
		case DbType.Int64:
		{
			return "GetInt64";
		}
		case DbType.AnsiStringFixedLength:
		case DbType.AnsiString:
		case DbType.String:
		case DbType.StringFixedLength:
		{
			return "GetString";
		}
		case DbType.Boolean:
		{
			return "GetBoolean";
		}
		case DbType.Guid:
		{
			return "GetGuid";
		}
		case DbType.Currency:
		case DbType.Decimal:
		{
			return "GetDecimal";
		}
		case DbType.DateTime:
		case DbType.Date:
		{
			return "GetDateTime";
		}
		case DbType.Binary:
		{
			return "GetBytes";
		}
		default:
		{
			return "__SQL__" + column.DataType;
		}
	}
}

public string GetSqlDbType(ColumnSchema column)
{
	switch (column.NativeType)
	{
		case "bigint": return "BigInt";
		case "binary": return "Binary";
		case "bit": return "Bit";
		case "char": return "Char";
		case "datetime": return "DateTime";
		case "decimal": return "Decimal";
		case "float": return "Float";
		case "image": return "Image";
		case "int": return "Int";
		case "money": return "Money";
		case "nchar": return "NChar";
		case "ntext": return "NText";
		case "numeric": return "Decimal";
		case "nvarchar": return "NVarChar";
		case "real": return "Real";
		case "smalldatetime": return "SmallDateTime";
		case "smallint": return "SmallInt";
		case "smallmoney": return "SmallMoney";
		case "sql_variant": return "Variant";
		case "sysname": return "NChar";
		case "text": return "Text";
		case "timestamp": return "Timestamp";
		case "tinyint": return "TinyInt";
		case "uniqueidentifier": return "UniqueIdentifier";
		case "varbinary": return "VarBinary";
		case "varchar": return "VarChar";
		default: return "__UNKNOWN__" + column.NativeType;
	}
}

//So dirty function! -- reviewed by shenbo
public string MakeCamel(string value)
{
	return value.Substring(0, 1).ToUpper() + value.Substring(1);
}

//I will be dirty too! -- coded by shenbo
public string MakePascal(string value)
{
	return value.Substring(0, 1).ToUpper() + value.Substring(1);
}

public string MakePlural(string name)
{
//	Regex plural1 = new Regex("(?<keep>[^aeiou])y$");
//	Regex plural2 = new Regex("(?<keep>[aeiou]y)$");
//	Regex plural3 = new Regex("(?<keep>[sxzh])$");
//	Regex plural4 = new Regex("(?<keep>[^sxzhy])$");
//
//	if(plural1.IsMatch(name))
//		return plural1.Replace(name, "${keep}ies");
//	else if(plural2.IsMatch(name))
//		return plural2.Replace(name, "${keep}s");
//	else if(plural3.IsMatch(name))
//		return plural3.Replace(name, "${keep}es");
//	else if(plural4.IsMatch(name))
//		return plural4.Replace(name, "${keep}s");

	return name;
}

public string MakeSingle(string name)
{
//	Regex plural1 = new Regex("(?<keep>[^aeiou])ies$");
//	Regex plural2 = new Regex("(?<keep>[aeiou]y)s$");
//	Regex plural3 = new Regex("(?<keep>[sxzh])es$");
//	Regex plural4 = new Regex("(?<keep>[^sxzhyu])s$");
//
//	if(plural1.IsMatch(name))
//		return plural1.Replace(name, "${keep}y");
//	else if(plural2.IsMatch(name))
//		return plural2.Replace(name, "${keep}");
//	else if(plural3.IsMatch(name))
//		return plural3.Replace(name, "${keep}");
//	else if(plural4.IsMatch(name))
//		return plural4.Replace(name, "${keep}");

	return name;
}

public override string GetFileName()
{
	return this.GetDALClassName() + ".cs";
}

public void PrintHeader()
{
	Response.WriteLine("//============================================================");
	Response.WriteLine("// Producnt name:		 ");
	Response.WriteLine("// Version: 			 ");
	Response.WriteLine("// Coded by:			 ");
	Response.WriteLine("// Auto generated at: 	 ");
	Response.WriteLine("//============================================================");
	Response.WriteLine();
}

public string GetCloumnName(string cloumn)
{
	return 	cloumn.Substring(0,1).ToUpper()+cloumn.Substring(1);
}



public string GetColumnAndChinese()
{
    string rtn = "";
    foreach(ColumnSchema column in TargetTable.Columns)
    {
        rtn += column.Name+" "+column.Description +", ";
    }
    rtn = rtn.Substring(0,rtn.Length-2);
    return rtn;
}
</script>